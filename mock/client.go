// Code generated by MockGen. DO NOT EDIT.
// Source: ../client.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	httpy "github.com/reecerussell/httpy"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockClient) Do(ctx context.Context, req *httpy.Request) (*httpy.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", ctx, req)
	ret0, _ := ret[0].(*httpy.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockClientMockRecorder) Do(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockClient)(nil).Do), ctx, req)
}

// SetBaseURL mocks base method.
func (m *MockClient) SetBaseURL(url string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetBaseURL", url)
}

// SetBaseURL indicates an expected call of SetBaseURL.
func (mr *MockClientMockRecorder) SetBaseURL(url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBaseURL", reflect.TypeOf((*MockClient)(nil).SetBaseURL), url)
}

// SetTimeout mocks base method.
func (m *MockClient) SetTimeout(d time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTimeout", d)
}

// SetTimeout indicates an expected call of SetTimeout.
func (mr *MockClientMockRecorder) SetTimeout(d interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTimeout", reflect.TypeOf((*MockClient)(nil).SetTimeout), d)
}
